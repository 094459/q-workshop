AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a Docker container application on Amazon ECS with an ALB and RDS PostgreSQL database

Parameters:
  AppImageURI:
    Type: String
    Description: The URI of the Docker image in Amazon ECR (e.g., <account-id>.dkr.ecr.<region>.amazonaws.com/<repo-name>:<tag>)
  DBHost:
    Type: String
    Description: The endpoint of the RDS PostgreSQL database instance
  DBName:
    Type: String
    Description: The name of the PostgreSQL database
  DBUser:
    Type: String
    Description: The username for the PostgreSQL database
  DBPassword:
    Type: String
    NoEcho: true
    Description: The password for the PostgreSQL database
  SecretKey:
    Type: String
    NoEcho: true
    Description: A secret key for the Flask application
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: The ID of the VPC where the resources will be created
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: The ID of the first public subnet
  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: The ID of the second public subnet
  AppRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The ID of the security group for the RDS PostgreSQL database instance


Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MyAppCluster

  # IAM Role for ECS Task Execution
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${AWS::StackName}-logs'
      RetentionInDays: 7  # Adjust the retention period as needed

  # Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: my-app-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: my-app-container
          Image: !Ref AppImageURI
          PortMappings:
            - ContainerPort: 5000
          Environment:
            - Name: DB_HOST
              Value: !Ref DBHost
            - Name: DB_NAME
              Value: !Ref DBName
            - Name: DB_USER
              Value: !Ref DBUser
            - Name: DB_PASSWORD
              Value: !Ref DBPassword
            - Name: SECRET_KEY
              Value: !Ref SecretKey
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: my-app

  # Security Group for ECS Service
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to the ECS service
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0

  # Security Group for RDS Database

  SecurityGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref AppRDSSecurityGroup
        IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId: !Ref ServiceSecurityGroup

  # Application Load Balancer
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to the ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 5000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      LoadBalancerArns:
        - !Ref ALB
      HealthCheckPath: /add 

  # Service
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: my-app-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      LoadBalancers:
        - ContainerName: my-app-container
          ContainerPort: 5000
          TargetGroupArn: !Ref ALBTargetGroup

Outputs:
  ALBDNSName:
    Description: The DNS name of the Application Load Balancer
    Value: !GetAtt ALB.DNSName
